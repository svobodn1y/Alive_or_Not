import pandas as pd
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


class ClientState(StatesGroup):
    START_GAME = State()
    TYPE_SELECTED = State()
    ASKING_QUESTIONS = State()
    LOOP = State()


bot = Bot(token='6442849889:AAELPAMSRdASQ2s8f-Ta4VEovWwBOSNoC1M')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start_proccess(message: types.Message, state: FSMContext) -> None:

    msg = "–ó–∞–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –∞ –Ø –ø–æ–ø—ã—Ç–∞—é—Å—å –µ–≥–æ —É–≥–∞–¥–∞—Ç—å.\n–î–ª—è —ç—Ç–æ–≥–æ –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ù–∞—á–Ω–µ–º?"
    msk_btn = KeyboardButton('–ù–∞—á–∞—Ç—å –ò–≥—Ä—É')

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(msk_btn)

    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_GAME)


@dp.message_handler(state=ClientState.START_GAME)
async def choose_type_process(message: types.Message, state: FSMContext):

    alive_btn = KeyboardButton('–î–∞')
    not_alive_btn = KeyboardButton('–ù–µ—Ç')

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(alive_btn, not_alive_btn)

    await message.answer('–≠—Ç–æ –∂–∏–≤–æ–µ?', reply_markup=markup)
    await state.set_state(ClientState.TYPE_SELECTED)


@dp.message_handler(state=ClientState.TYPE_SELECTED)
async def beginning_process(message: types.Message, state: FSMContext):

    user_msg = message.text
    if user_msg == '–î–∞':
        df = pd.read_excel("Alive.xlsx")
    else:
        df = pd.read_excel("Things.xlsx")

    database = df.to_dict('records')
    questions = df.columns.tolist()[1:]
    await state.update_data(DB=database)
    await state.update_data(QUEST=questions)

    button1 = KeyboardButton(text="–î–∞", callback_data="ask")
    button2 = KeyboardButton(text="–ù–µ—Ç", callback_data="ask")
    button3 = KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(button1, button2)
    markup.row(button3)

    await message.answer(f"{questions[0]}", reply_markup=markup)
    await state.set_state(ClientState.ASKING_QUESTIONS)


@dp.message_handler(state=ClientState.ASKING_QUESTIONS)
async def asking_questions_process(message: types.Message, state: FSMContext):

    user_msg = message.text
    if user_msg == '–î–∞':
        answer = True
    elif user_msg == '–ù–µ—Ç':
        answer = False

    user_state_data = await state.get_data()
    to_remove = []
    database = user_state_data['DB']
    questions = user_state_data['QUEST']

    if user_msg != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        for d in database:
            if d[questions[0]] != answer:
                to_remove.append(d)

        for i in to_remove:
            database.remove(i)

    questions.pop(0)

    if len(database) == 1:
        button = KeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button)

        await message.answer("–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ " + database[0]["name"], reply_markup=markup)
        await state.set_state(ClientState.START_GAME)

    elif len(database) == 0:
        button = KeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button)

        await message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Öüòî", reply_markup=markup)
        await state.set_state(ClientState.START_GAME)

    elif len(questions) == 0:
        button1 = KeyboardButton(text="–î–∞", callback_data="ask")
        button2 = KeyboardButton(text="–ù–µ—Ç", callback_data="ask")

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button1, button2)

        await message.answer(f"–≠—Ç–æ {database[0]['name']}?", reply_markup=markup)
        await state.set_state(ClientState.LOOP)

    else:
        await state.update_data(DB=database)
        await state.update_data(QUEST=questions)

        button1 = KeyboardButton(text="–î–∞")
        button2 = KeyboardButton(text="–ù–µ—Ç")
        button3 = KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button1, button2)
        markup.row(button3)

        await message.answer(f"{questions[0]}", reply_markup=markup)


@dp.message_handler(state=ClientState.LOOP)
async def loop_process(message: types.Message, state: FSMContext):
    user_msg = message.text
    user_state_data = await state.get_data()

    database = user_state_data['DB']
    if user_msg == '–î–∞':
        button = KeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button)

        await message.answer("–í—ã –∑–∞–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ " + database[0]["name"], reply_markup=markup)
        await state.set_state(ClientState.START_GAME)

    elif len(database) == 1:
        button = KeyboardButton('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button)

        await message.answer("–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Öüòî", reply_markup=markup)
        await state.set_state(ClientState.START_GAME)

    else:
        database.pop(0)
        await state.update_data(DB=database)

        button1 = KeyboardButton(text="–î–∞")
        button2 = KeyboardButton(text="–ù–µ—Ç")

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(button1, button2)

        await message.answer(f"–≠—Ç–æ {database[0]['name']}?", reply_markup=markup)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
